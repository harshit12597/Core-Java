41.	Write a program to demonstrate this() construct functionality.
---->
class ThisConstruct
{
	private int id;
	private String name;
	ThisConstruct()
	{
		this(100,"ABC")
	}
	ThisConstruct(int id,String name)
	{
		this.id=id;
		this.name=name;
	}
}
class ThisConstructDemo
{
	public static void main(String args[])
	{
		ThisConstruct t=new ThisConstruct();
	}
}

===============================================================================================================
42.	Create a class Tile to store the edge length of a square tile, and create another class Floor to store length and width of a rectangular floor. Add method totalTiles(Tile t) in Floor class with Tile as argument to calculate the whole number of tiles needed to cover the floor completely.
------->
import java.util.*;

class Tile{
	public float Edge_length ;
	Tile(){}
	Tile(float Edge_length){
		this.Edge_length=Edge_length;
	}
	
}
class FloorDemo
{
	private float length;
	private float width;
	FloorDemo(){}
	FloorDemo(float length , float width)
	{
		this.length = length;
		this.width=width;
	}
	float totalTiles(Tile t)
	{
		float total=0;
		float area_tile = t.Edge_length * t.Edge_length;
		float area_floor = length * width;
		total = area_floor/area_tile;
		return total;
	}
	
	public static void main (String args[])
	{
		Scanner sc = new Scanner(System.in);

		System.out.println("enter the tile edge length");
		float el= sc.nextFloat();

		Tile t = new Tile(el);

		System.out.println("enter the floor length and width");
		float length = sc.nextFloat();
		float width = sc.nextFloat();

		FloorDemo f = new FloorDemo(length,width);

		float result = f.totalTiles(t);

		System.out.println("total no of tilles  : "+result);
	}
	
}

===============================================================================================================
43.	Create a class OneBHK with instance variables roomArea, hallArea and price. Then create default constructor that initializes instance variables with some values and a parameterized constructor that takes values for all instance variables and stores them in instance variables. Now create a method named show()  to print OneBHK’s instance variable values.
Create another class TwoBHK which has (inherites) all the properties and behaviors of OneBHK and a new instance variable room2Area. Then create default constructor to initialize all 4 instance variables and a parameterized constructor to take the values for initialization of all instance variables. Override show() method to print all data member information.
Write main method in another class (Say Demo) and store three TwoBHK flat’s information and print information using show method. Also print total amount of all flats. 
------>
class OneBHK
{
	private int roomArea;
	private int hallArea;
	private int price;
	
	OneBHK()
	{
		this.roomArea=0;
		this.hallArea=0;
		this.price=0;
	}
	OneBHK(int roomArea,int hallArea,int price)
	{
		this.roomArea=roomArea;
		this.hallArea=hallArea;
		this.price=price;
	}
	void show()
	{
		System.out.println("Room Area = "+roomArea+" Hall Area = "+hallArea+" Price = "+price);
	}
}
class TwoBHK extends OneBHK
{
	private int room2Area;
	TwoBHK()
	{
		this.room2Area=0;
	}
	TwoBHK(int roomArea,int hallArea,int price, int room2Area)
	{
		super(roomArea, hallArea, price);
		this.room2Area=room2Area;
	}
	void show()
	{
		super.show();
		System.out.println("Room 2 Area = "+room2Area);
	}
}
class BHKDemo
{
	public static void main(String args[])
	{
		TwoBHK tb=new TwoBHK(125,56,3600,128);
		tb.show();
	}
}


===============================================================================================================
44.	Create three classes
-	Faculty with two data members facultyId and salary and two methods, one intput() method for accepting facultyId as input and another printSalary() to print salary.
-	FullTimeFaculty that inherits class Faculty with two data members’ basicSalary and allowance. Override input() method in this class that calls super class inut() method and accepts basicSalary and allowance as input. Salary should not be accepted as input but should be calculated using formula (basicSalary + allowance)
-	PartTimeFaculty that inherits class Faculty with two data members’ workingHours, ratePerHour. Override input() method in this class that calls super class inut() method and accepts workingHours and ratePerHour as input. Salary should not be accepted as input but should be calculated using formula ( workingHour * ratePerHour )
---->
import java.util.*;
class Faculty
{
	int facultyId;
	float salary;
	void input(int facultyId)
	{
		this.facultyId=facultyId;
	}
	void printSalary()
	{
		System.out.println("FacultyId = "+facultyId+" Salary ="+salary);
	}
	void setSalary(float salary)
	{
		this.salary=salary;
	}
	
}
class FullTimeFaculty extends Faculty
{
	float basicSalary;
	float allowance;
	void input(int facultyId,float basicSalary, float allowance)
	{
		input(facultyId);
		this.basicSalary=basicSalary;
		this.allowance=allowance;
		setSalary(basicSalary+allowance);
	}

	
}
class PartTimeFaculty extends Faculty
{
	int workingHours;
	float ratePerHour;
	void input(int facultyId, int workingHours, float ratePerHour)
	{
		input(facultyId);
		this.workingHours=workingHours;
		this.ratePerHour=ratePerHour;
		setSalary(workingHours * ratePerHour);
	}	
}
class FacultyDemo
{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter Faculty Id, Basic Salary, Allowance for Full time Fac :");
		int facultyId;
		facultyId=sc.nextInt();
		float basicSalary=sc.nextFloat();
		float allowance=sc.nextFloat();

		FullTimeFaculty f = new FullTimeFaculty();
		f.input(facultyId,basicSalary,allowance);
		f.printSalary();

		System.out.println("Enter faculty Id, working hours,Rate per Hour for Part time Fac :");
		facultyId=sc.nextInt();
		int workingHour=sc.nextInt();
		float ratePerHour=sc.nextFloat();

		PartTimeFaculty p = new PartTimeFaculty(); 
		p.input(facultyId,workingHour,ratePerHour);
		p.printSalary();
	}
}


===============================================================================================================
45.	Create a class Student with two members : rollno and percentage. Create default and parameterized constructors. Create method show() to display information. Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays semester. Create another class SchoolStudent inherits Student class. Add a new member className(eg 12th ,10th etc.) to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays className. Create a class( say Demo) with main method that carries out the operation of the project : -- has array to store objects of any class(Student,  CollegeStudent or SchoolStudent) --create two CollegeStudent  and three SchoolStudent objects and store them inside the array -- display all records from the array -- search record on the basic of rollno and check given rollno is of SchoolStudent or of CollegeStudent. --count how many students are having A grade, if for A grade percentage >75. 
----->
class Student 
{
	private int rNo;
    	private double percentage;

    	Student() 
	{
              	percentage = 0;
    	}

    	Student(int rollNo, double percentage) 
	{
        	this.rNo = rNo;
        	this.percentage = percentage;
    	}

    	void show() 
	{
        	System.out.print("Roll no. : " + rNo + " Percentage: " + percentage + "%");
    	}

    	int getRollNo() 
	{
        	return rNo;
    	}

    	double getPercentage() 
	{
        	return percentage;
    	}

}

class CollegeStudent extends Student 
{
    	private int semester;

    	CollegeStudent() 
	{
        	semester = 0;
    	}

    	CollegeStudent(int rNo, double percentage, int semester) 
	{
        	super(rNo, percentage);
        	this.semester = semester;
	}

    	void show() 
	{
        	super.show();
        	System.out.println(" Semester : " + semester);
    	}

}

class SchoolStudent extends Student 
{
    	private int className;

    	SchoolStudent() 
	{
        	className = 0;
    	}

    	SchoolStudent(int rNo, double percentage, int className) 
	{
        	super(rNo, percentage);
        	this.className = className;
    	}

    	void show() 
	{
        	super.show();
        	System.out.println(" className: " + className);
    	}

}

public class StudentDemo 
{

    	public static void main(String args[]) 
	{
        	Student arr[] = { new CollegeStudent(10, 60, 1), new CollegeStudent(12, 80, 2), new SchoolStudent(15, 95, 10),
                	new SchoolStudent(16, 90, 8), new SchoolStudent(18, 70, 7) };

        	for (Student s : arr) {
            	s.show();
        }

        int searchRollNo = 15;

        for (Student s : arr) 
	{
            if (s.getRollNo() == searchRollNo) 
	    {

                if (s instanceof CollegeStudent)
		{
                    	System.out.println("This is a college student with following details:");
                }
		else if (s instanceof SchoolStudent)
                {
		   	System.out.println("This is a School student with following details:");
                }
		s.show();
            }
        }
        int count = 0;
        for (Student s : arr) {
            if (s.getPercentage() >= 75) 
	    {
                System.out.print("Grade = A  ");
                s.show();
                count++;
            }
        }

        System.out.println("No of students with A grade: " + count);

    }

}

===============================================================================================================
46.	Create a program to demonstrate the use of instanceof operator or secure reference down casting.
---->
import java.lang.*;

class Shape 
{

    	int length;
    	int height;

    	void show() 
	{
        	System.out.println("Length: " + length + " height: " + height);
    	}

    	Shape() 
	{
    	}

    	Shape(int length, int height) 
	{
        	this.length = length;
        	this.height = height;
    	}

    	void Area() 
	{
    	}

	}

	class Rectangle extends Shape 
	{

    	void Area() 
	{
        	super.show();
        	System.out.println("Area:  " + (length * height));
    	}

    	void diagonal() 
	{
        	double a = Math.pow(length, 2) + Math.pow(height, 2);
        	System.out.println(" Diagonal is: " + (Math.sqrt(a)));
    	}

    	Rectangle() 
	{
    	}

    	Rectangle(int length, int height) 
	{
        	super(length, height);
    	}
	
}

class Triangle extends Shape 
{
    	void Area() 
	{
        	super.show();
        	System.out.println("Area:  " + (0.5 * length * height));
    	}

    	Triangle() 
	{
    	}

    	Triangle(int length, int height) 
	{
        	super(length, height);
    	}
}

public class ReferenceDownCastingDemo 
{
	public static void main(String[] args) 
	{

        	Shape sArr[] = { new Rectangle(30, 40), new Triangle(10, 20) };

        	sArr[0].Area();

        	Rectangle r = (Rectangle) sArr[0];
        	r.diagonal();
        	sArr[1].Area();

    	}

}
===============================================================================================================
47.	Create a program to demonstrate constructor chaining.
------>
class Base
{
	Base()
	{
		System.out.println("No-arg Constructor Base");
	}
	Base(int i)
	{
		System.out.println("Parameterized Constructor Base");
	}
}
class Derived extends Base
{
	Derived()
	{
		
		System.out.println("No-arg Constructor Derived");
	}
	Derived(int i)
	{
		System.out.println("Parameterized Constructor Derived");
	}
}
class ConstructorChaningDemo
{
	public static void main(String args[])
	{
		Derived d = new Derived();
		Derived d1 = new Derived(11);
	}
}
===============================================================================================================
48.	Create an Abstract class Processor with int member variable data  and method showData to display data value. Create abstract method process() to define processing of member data. Create a class  Factorial using abstract class Processor  to calculate and print factorial of a number by overriding the process method. b. Create a class Circle using abstract class Processor to calculate and print area of a circle by overriding the process method.Ask user to enter choice (factorial or circle area).  Also ask data to work upon. Use Processor class reference to achieve this mechanism.
----->
import java.util.*;
abstract class Processor
{
	int data;
	void showData()
	{
		System.out.println("Result = "+data);
	}
	abstract void proccess();
} 
class Factorial extends Processor
{
	void proccess()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter Number :");
		int n=sc.nextInt();
		int fact=1;
		for(int i=1;i<=n;i++)
		{
			fact=fact*i;
		}
		data=fact;
	}
}

class Circle extends Processor
{
	void proccess()
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter radius to calculate Circle :");
		int r=sc.nextInt();
		data=(int)(3.14*r)*2;
	}
}
class AbstractDemo
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter ur Choice :\n1) Calculate Factorial \n2)Calculate Area of circle");
		
		int ch=sc.nextInt();
		
		switch(ch)
		{
			case 1:
				Factorial f = new Factorial();
				f.proccess();
				f.showData();
				break;
			case 2:
				Circle c = new Circle();
				c.proccess();
				c.showData();
				break;
			default :
				System.out.println("Invalid Choice");
		}
	}
}

===============================================================================================================
49.	Create Interface Taxable with members salesTax=7% and incomeTax=10.5%. create abstract method calcTax(). a. Create class Employee(empId,name,salary) and implement Taxable to calculate incomeTax on yearly salary. b. Create class Product(pid,price,quantity) and implement Taxable to calculate salesTax on unit price of product. c. Create class for main method(Say XYZ), accept employee information and a product information from user and print income tax and sales tax respectively.
---->
import java.util.*;
interface Taxable
{
	float salesTax=7f,incomeTax=10.5f;
	void calcTax();
}
class Employee implements Taxable
{
	int empId;
	String name;
	double salary;
	float tax;
	Employee(int empId, String name, double salary)
	{
		this.empId=empId;
		this.name=name;
		this.salary=salary;
	}
	public void calcTax()
	{
		tax=(float)((salary*12)*(incomeTax))/100;
	}
	void show()
	{
		System.out.println("Annual Income Tax ="+tax);
	}
}
class Product implements Taxable
{
	int pid;
	float price;
	int quantity;
	float tax;
	Product(int pid, float price, int quantity)
	{
		this.pid=pid;
		this.price=price;
		this.quantity=quantity;
	}
	public void calcTax()
	{
		tax=(float)(price*salesTax)/100;
	}
	void show()
	{
		System.out.println("per unit sales Tax = "+tax);
	}
}

class InterfaceDemo
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter empId, name , salary :");
		int empId = sc.nextInt();
		String name = sc.next();
		double salary = sc.nextDouble(); 
		Employee e = new Employee(empId,name,salary);
		e.calcTax();
		e.show();

		System.out.println("Enter pid,price,quantity :");
		int pid=sc.nextInt();
		float price=sc.nextFloat();
		int quantity=sc.nextInt();
		
		Product p = new Product(pid,price,quantity);
		p.calcTax();
		p.show();
	}
}

===============================================================================================================
50.	Explain the importance of toString() and equals() method of the Object class and override them on class Employee(empId,name,salary).  a. Create class for main method(say XYZ),and accept five employees information and store in an array. Also ensure if entered empId already exist or not (use equals method).  b. Display all employee info using toString method.
------>
package Day7;

import java.util.Scanner;

class Employee{
	private int empId;
	private String name;
	private double salary;
	public Employee(int empId, String name, double salary) {
		super();
		this.empId = empId;
		this.name = name;
		this.salary = salary;
	}
	@Override
	public boolean equals(Object obj) {
		Employee emp=(Employee)obj;
		return empId == emp.empId;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + "]";
	}
	
}
public class ToStringDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		Employee arr[]= new Employee[5];
		for(int i=0;i<5;i++)
		{
			System.out.println("Enter Id :");
			int id=sc.nextInt();
			System.out.println("Enter name :");
			String name=sc.next();
			System.out.println("Enter salary :");
			double sal=sc.nextDouble();
			Employee e=new Employee(id,name,sal);
			arr[i]=e;
			
		}
		for(int i=0;i<5;i++)
		{
			System.out.println(arr[i]+".equals("+arr[i+1]+"):"+arr[i].equals(arr[i+1]));
		}
		
		
	}

}